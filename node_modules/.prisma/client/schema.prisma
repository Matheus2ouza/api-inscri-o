generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model localidades {
  id                  Int                       @id @default(autoincrement()) @map("id")
  nome                String                    @map("nome") @db.VarChar(100)
  saldo_devedor       Decimal?                  @default(0.00) @map("saldo_devedor") @db.Decimal(10, 2)
  status              Boolean?                  @default(false) @map("status")
  role                String?                   @default("user") @map("role") @db.VarChar(50)
  autenticacao        autenticacao_localidades?
  registrationDetails registration_details[]
  comprovantes        comprovantes[]
  inscricao_avulsa    inscricao_avulsa[]

  @@map("localidades")
}

model autenticacao_localidades {
  localidade_id    Int         @id @map("localidade_id")
  senha_hash       String      @map("senha_hash") @db.VarChar(512)
  salt             String      @map("salt") @db.VarChar(32)
  algoritmo        String      @default("bcrypt") @map("algoritmo") @db.VarChar(20)
  data_atualizacao DateTime?   @default(now()) @map("data_atualizacao") @db.Timestamp(6)
  localidade       localidades @relation(fields: [localidade_id], references: [id], onDelete: Cascade)

  @@map("autenticacao_localidades")
}

model eventos {
  id                  Int                    @id @default(autoincrement()) @map("id")
  descricao           String                 @map("descricao") @db.VarChar(200)
  data_limite         DateTime               @map("data_limite") @db.Date
  inscricoesAvulsas   inscricao_avulsa[]
  tiposInscricao      tipo_inscricao[]
  registrationDetails registration_details[]
  eventRules          event_rules[]
  vendasAlimentacao   venda_alimentacao[]

  @@map("eventos")
}

model event_rules {
  id           Int      @id @default(autoincrement()) @map("id")
  evento_id    Int      @map("evento_id")
  min_age      Int?     @map("min_age")
  max_age      Int?     @map("max_age")
  allow_male   Boolean? @default(true) @map("allow_male")
  allow_female Boolean? @default(true) @map("allow_female")

  evento eventos @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@map("event_rules")
}

model tipo_inscricao {
  id                Int                @id @default(autoincrement()) @map("id")
  descricao         String             @map("descricao") @db.VarChar(50)
  valor             Decimal?           @map("valor") @db.Decimal(10, 2)
  evento_id         Int?               @map("evento_id")
  eventos           eventos?           @relation(fields: [evento_id], references: [id], onDelete: NoAction)
  inscription_lists inscription_list[]

  @@map("tipo_inscricao")
}

model registration_details {
  id                   Int                @id @default(autoincrement()) @map("id")
  evento_id            Int                @map("evento_id")
  localidade_id        Int                @map("localidade_id")
  responsavel          String             @map("responsavel")
  quantidade_inscritos Int                @map("quantidade_inscritos")
  saldo_devedor        Decimal?           @map("saldo_devedor") @db.Decimal(10, 2)
  status               RegistrationStatus @default(pendente)
  data_inscricao       DateTime           @map("data_inscricao") @db.Date

  evento     eventos     @relation(fields: [evento_id], references: [id], onDelete: Cascade)
  localidade localidades @relation(fields: [localidade_id], references: [id], onDelete: Cascade)

  inscritos    inscription_list[]
  comprovantes comprovantes[]

  @@map("registration_details")
}

model inscription_list {
  id                      Int    @id @default(autoincrement()) @map("id")
  registration_details_id Int    @map("registration_details_id")
  nome_completo           String @map("nome_completo") @db.VarChar(255)
  idade                   Int    @map("idade")
  sexo                    String @map("sexo") @db.VarChar(20)
  tipo_inscricao_id       Int    @map("tipo_inscricao_id")

  registration_details registration_details @relation(fields: [registration_details_id], references: [id], onDelete: Cascade)
  tipo_inscricao       tipo_inscricao       @relation(fields: [tipo_inscricao_id], references: [id], onDelete: NoAction)

  @@unique([registration_details_id, nome_completo])
  @@map("inscription_list")
}

model caixa {
  id            Int      @id @default(autoincrement()) @map("id")
  descricao     String   @map("descricao")
  responsavel   String   @map("responsavel") @db.VarChar(255)
  valor         Decimal  @map("valor") @db.Decimal(10, 2)
  tipoMovimento String   @map("tipomovimento") @db.VarChar(50)
  data          DateTime @map("data") @db.Date

  @@map("caixa")
}

model comprovantes {
  id                      Int                  @id @default(autoincrement()) @map("id")
  localidade_id           Int                  @map("localidade_id")
  registration_details_id Int                  @map("registration_details_id")
  comprovante_imagem      Bytes                @map("comprovante_imagem")
  tipo_arquivo            String?              @map("tipo_arquivo") @db.VarChar(100)
  valor_pago              Decimal              @map("valor_pago") @db.Decimal(10, 2)
  date_pagamento          DateTime             @map("data_pagamento") @db.Date
  localidade              localidades          @relation(fields: [localidade_id], references: [id], onDelete: NoAction)
  registration_details    registration_details @relation(fields: [registration_details_id], references: [id], onDelete: NoAction)

  @@map("comprovantes")
}

model inscricao_avulsa {
  id                Int                @id @default(autoincrement()) @map("id")
  evento_id         Int                @map("evento_id")
  localidade_id     Int                @map("localidade_id")
  qtd_0_6           Int                @default(0) @map("qtd_0_6")
  qtd_7_10          Int                @default(0) @map("qtd_7_10")
  qtd_10_normal     Int                @default(0) @map("qtd_10_normal")
  qtd_visitante     Int                @default(0) @map("qtd_visitante")
  data              DateTime?          @map("data") @db.Date
  nome_responsavel  String?            @map("nome_responsavel") @db.VarChar(255)
  evento            eventos            @relation(fields: [evento_id], references: [id], onDelete: Cascade)
  localidade        localidades        @relation(fields: [localidade_id], references: [id], onDelete: Cascade)
  pagamentosAvulsos pagamento_avulso[]

  @@map("inscricao_avulsa")
}

model movimentacao_financeira {
  id        Int       @id @default(autoincrement()) @map("id")
  tipo      String    @map("tipo") @db.VarChar(20)
  descricao String?   @map("descricao") @db.VarChar(255)
  valor     Decimal   @map("valor") @db.Decimal(10, 2)
  data      DateTime? @default(now()) @map("data") @db.Timestamp(6)

  @@map("movimentacao_financeira")
}

model pagamento_alimentacao {
  id                   Int               @id @default(autoincrement()) @map("id")
  venda_alimentacao_id Int               @map("venda_alimentacao_id")
  tipo_pagamento       String            @map("tipo_pagamento") @db.VarChar(100)
  valor                Decimal           @map("valor") @db.Decimal(10, 2)
  venda_alimentacao    venda_alimentacao @relation(fields: [venda_alimentacao_id], references: [id], onDelete: Cascade)

  @@map("pagamento_alimentacao")
}

model pagamento_avulso {
  id                  Int              @id @default(autoincrement()) @map("id")
  inscricao_avulsa_id Int              @map("inscricao_avulsa2_id")
  tipo_pagamento      String           @map("tipo_pagamento") @db.VarChar(100)
  valor               Decimal          @map("valor") @db.Decimal(10, 2)
  inscricao_avulsa    inscricao_avulsa @relation(fields: [inscricao_avulsa_id], references: [id], onDelete: Cascade)

  @@map("pagamento_avulso")
}

model venda_alimentacao {
  id             Int                     @id @default(autoincrement()) @map("id")
  evento_id      Int                     @map("evento_id")
  tipo_refeicao  String                  @map("tipo_refeicao") @db.VarChar(100)
  quantidade     Int                     @map("quantidade")
  valor_unitario Decimal                 @map("valor_unitario") @db.Decimal(10, 2)
  valor_total    Decimal                 @map("valor_total") @db.Decimal(10, 2)
  pagamentos     pagamento_alimentacao[]
  evento         eventos                 @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@map("venda_alimentacao")
}

enum TipoRefeicao {
  CAFE
  ALMOCO
  JANTA
}

enum DiaSemana {
  SEXTA
  SABADO
  DOMINGO
}

model Refeicao {
  id                String       @id @default(uuid())
  tipo              TipoRefeicao
  dia               DiaSemana
  valor             Float
  quantidadeVendida Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refeicao")
}

enum RegistrationStatus {
  pendente
  pago
  cancelado
}
